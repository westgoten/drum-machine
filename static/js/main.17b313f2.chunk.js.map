{"version":3,"sources":["actions/creators.js","actions/types.js","components/DrumPad.js","utils/consts/drumPad.js","utils/consts/instrumentKits.js","utils/consts/drumPadGrid.js","components/DrumPadGrid.js","components/PowerSwitch.js","components/InstrumentSwitch.js","components/Display.js","components/VolumeSlider.js","components/Controls.js","components/DrumMachine.js","components/App.js","reducers/drumMachineReducer.js","store.js","serviceWorker.js","index.js"],"names":["changeSound","createAction","changeVolume","changeInstrumentKit","turnPowerOnOff","mapDispatchToProps","connect","state","isPowerOn","currentVolume","props","handleKeyPress","event","key","toLowerCase","text","repeat","play","useEffect","document","addEventListener","removeEventListener","useState","drumPadClass","setDrumPadClass","timeoutId","setTimeoutId","audio","useRef","sound","name","audioNode","current","currentTime","resetAnimation","clearTimeout","id","setTimeout","volume","pause","className","onClick","ref","src","Sound","this","instrumentKits","DRUM_PADS_TEXTS","currentInstrumentKit","drumPadSounds","drumPads","i","push","type","checked","onChange","target","disabled","displayContent","min","max","step","value","newVolume","Number","Controls","DrumMachine","App","initialState","currentSound","drumMachineReducer","createReducer","action","payload","Object","assign","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.17b313f2.chunk.js","sourcesContent":["import * as types from './types'\r\nimport { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const changeSound = createAction(types.CHANGE_SOUND)\r\nexport const changeVolume = createAction(types.CHANGE_VOLUME)\r\nexport const changeInstrumentKit = createAction(types.CHANGE_INSTRUMENT_KIT)\r\nexport const turnPowerOnOff = createAction(types.TURN_POWER_ON_OFF)\r\n","export const CHANGE_SOUND = 'change sound'\r\nexport const CHANGE_VOLUME = 'change volume'\r\nexport const CHANGE_INSTRUMENT_KIT = 'change instrument kit'\r\nexport const TURN_POWER_ON_OFF = 'turn power on/off'\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { changeSound } from '../actions/creators'\r\nimport { DRUM_PAD_IDLE, DRUM_PAD_ACTIVE, DRUM_PAD_INACTIVE } from '../utils/consts/drumPad'\r\nimport '../style/DrumPad.scss'\r\n\r\nfunction DrumPad(props) {\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', handleKeyPress)\r\n        return () => document.removeEventListener('keydown', handleKeyPress)\r\n    })\r\n\r\n    function handleKeyPress(event) {\r\n        if (event.key.toLowerCase() === props.text.toLowerCase() && !event.repeat)\r\n            play()\r\n    }\r\n\r\n    const [drumPadClass, setDrumPadClass] = useState(DRUM_PAD_IDLE)\r\n    const [timeoutId, setTimeoutId] = useState(-1)\r\n    const audio = useRef(null)\r\n    function play() {\r\n        if (props.isPowerOn) {\r\n            props.changeSound(props.sound.name)\r\n            const audioNode = audio.current\r\n            audioNode.currentTime = 0\r\n            audioNode.play()\r\n        }\r\n        animateDrumPad()\r\n    }\r\n\r\n    function animateDrumPad() {\r\n        if (drumPadClass === DRUM_PAD_IDLE) {\r\n            if (props.isPowerOn)\r\n                setDrumPadClass(DRUM_PAD_ACTIVE)\r\n            else\r\n                setDrumPadClass(DRUM_PAD_INACTIVE)\r\n            resetAnimation()\r\n        } else {\r\n            clearTimeout(timeoutId)\r\n            resetAnimation()\r\n        }\r\n    }\r\n\r\n    function resetAnimation() {\r\n        const id = setTimeout(() => {\r\n            setDrumPadClass(DRUM_PAD_IDLE)\r\n        }, 120)\r\n        setTimeoutId(id)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const audioNode = audio.current\r\n        audioNode.volume = props.currentVolume / 100\r\n        if (!props.isPowerOn)\r\n            audioNode.pause()\r\n    })\r\n\r\n    return (\r\n        <div id='drum-pad' className={drumPadClass} onClick={play}>\r\n            <span className='text'>{props.text}</span>\r\n            <audio id={props.text} className='clip' ref={audio} src={props.sound.src}></audio>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isPowerOn: state.isPowerOn,\r\n        currentVolume: state.currentVolume\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = { changeSound }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DrumPad)\r\n","// Animation\r\nexport const DRUM_PAD_IDLE = 'drum-pad'\r\nexport const DRUM_PAD_ACTIVE = 'drum-pad-active'\r\nexport const DRUM_PAD_INACTIVE = 'drum-pad-inactive'\r\n","export const HEATER_KIT = 'Heater Kit'\r\nexport const SMOOTH_PIANO_KIT = 'Smooth Piano Kit'\r\n\r\nfunction Sound(name, src) {\r\n    this.name = name\r\n    this.src = src\r\n}\r\n\r\nconst instrumentKits = {\r\n    [HEATER_KIT]: [\r\n        new Sound('Heater 1', 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'),\r\n        new Sound('Heater 2', 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'),\r\n        new Sound('Heater 3', 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'),\r\n        new Sound('Heater 4', 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'),\r\n        new Sound('Clap', 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'),\r\n        new Sound('Open HH', 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'),\r\n        new Sound('Kick n\\' Hat', 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'),\r\n        new Sound('Kick', 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'),\r\n        new Sound('Closed HH', 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3')\r\n    ],\r\n    [SMOOTH_PIANO_KIT]: [\r\n        new Sound('Chord 1', 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'),\r\n        new Sound('Chord 2', 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'),\r\n        new Sound('Chord 3', 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'),\r\n        new Sound('Shaker', 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'),\r\n        new Sound('Open HH', 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'),\r\n        new Sound('Closed HH', 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'),\r\n        new Sound('Punchy Kick', 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'),\r\n        new Sound('Side Stick', 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'),\r\n        new Sound('Snare', 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3')\r\n    ]\r\n}\r\n\r\nexport default instrumentKits\r\n","// Size and order\r\nexport const NUMBER_OF_DRUM_PADS = 9\r\nexport const DRUM_PADS_TEXTS = ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C']\r\n","import React from 'react'\r\nimport DrumPad from './DrumPad'\r\nimport { connect } from 'react-redux'\r\nimport instrumentKits from '../utils/consts/instrumentKits'\r\nimport { NUMBER_OF_DRUM_PADS, DRUM_PADS_TEXTS } from '../utils/consts/drumPadGrid'\r\nimport '../style/DrumPadGrid.scss'\r\n\r\nfunction DrumPadGrid(props) {\r\n    const drumPadSounds = instrumentKits[props.currentInstrumentKit]\r\n    const drumPads = []\r\n    for (let i = 0; i < NUMBER_OF_DRUM_PADS; i++) {\r\n        drumPads.push(<DrumPad key={i} text={DRUM_PADS_TEXTS[i]} sound={drumPadSounds[i]} />)\r\n    }\r\n\r\n    return (\r\n        <div className='drum-pad-grid'>\r\n            {drumPads}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        currentInstrumentKit: state.currentInstrumentKit\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DrumPadGrid)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { turnPowerOnOff } from '../actions/creators'\r\nimport '../style/PowerSwitch.scss'\r\n\r\nfunction PowerSwitch(props) {\r\n    function handleSwitch(event) {\r\n        props.turnPowerOnOff(event.target.checked)\r\n    }\r\n\r\n    return (\r\n        <div className='power-container'>\r\n            <span className='switch-label'>Power</span>\r\n            <label className='switch-switch'>\r\n                <input type='checkbox' className='switch-input' checked={props.isPowerOn} onChange={handleSwitch}></input>\r\n                <span className='switch-slider'></span>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isPowerOn: state.isPowerOn\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = { turnPowerOnOff }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PowerSwitch)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { changeInstrumentKit } from '../actions/creators'\r\nimport { HEATER_KIT, SMOOTH_PIANO_KIT } from '../utils/consts/instrumentKits'\r\nimport '../style/InstrumentSwitch.scss'\r\n\r\nfunction InstrumentSwitch(props) {\r\n    function handleSwitch(event) {\r\n        event.target.checked \r\n            ? props.changeInstrumentKit(SMOOTH_PIANO_KIT) \r\n            : props.changeInstrumentKit(HEATER_KIT)\r\n    }\r\n\r\n    function isChecked() {\r\n        return props.currentInstrumentKit === SMOOTH_PIANO_KIT \r\n    }\r\n\r\n    return (\r\n        <div className='switch-container'>\r\n            <span className='switch-label'>Instrument</span>\r\n            <label className='switch-switch'>\r\n                <input type='checkbox' className='switch-input' checked={isChecked()} onChange={handleSwitch} disabled={!props.isPowerOn}></input>\r\n                <span className='instrument-slider'></span>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isPowerOn: state.isPowerOn,\r\n        currentInstrumentKit: state.currentInstrumentKit\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = { changeInstrumentKit }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InstrumentSwitch)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport '../style/Display.scss'\r\n\r\nfunction Display(props) {\r\n    return (\r\n        <p id='display' className='display'>{props.displayContent}</p>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        displayContent: state.displayContent\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Display)\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { changeVolume } from '../actions/creators'\r\nimport '../style/VolumeSlider.scss'\r\n\r\nfunction VolumeSlider(props) {\r\n    function handleVolumeChange(event) {\r\n        const newVolume = Number(event.target.value)\r\n        props.changeVolume(newVolume)\r\n    }\r\n\r\n    return (\r\n        <div className='slider-container'>\r\n            <input type='range' min='0' max='100' step='1' value={props.currentVolume} onChange={handleVolumeChange} disabled={!props.isPowerOn}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        isPowerOn: state.isPowerOn,\r\n        currentVolume: state.currentVolume\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = { changeVolume }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VolumeSlider)\r\n","import React from 'react'\r\nimport PowerSwitch from './PowerSwitch'\r\nimport InstrumentSwitch from './InstrumentSwitch'\r\nimport Display from './Display'\r\nimport VolumeSlider from './VolumeSlider'\r\nimport '../style/Controls.scss'\r\n\r\nfunction Controls(props) {\r\n    return (\r\n        <div className='controls'>\r\n            <PowerSwitch />\r\n            <Display />\r\n            <VolumeSlider />\r\n            <InstrumentSwitch />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls","import React from 'react'\r\nimport DrumPadGrid from './DrumPadGrid'\r\nimport Controls from './Controls'\r\nimport '../style/DrumMachine.scss'\r\n\r\nfunction DrumMachine(props) {\r\n    return (\r\n        <div id='drum-machine' className='main-container'>\r\n            <DrumPadGrid />\r\n            <Controls />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrumMachine\r\n","import React from 'react'\nimport DrumMachine from './DrumMachine'\nimport '../style/App.scss'\n\nfunction App() {\n  return (\n    <div id='app'>\n      <DrumMachine />\n    </div>\n  )\n}\n\nexport default App\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport * as types from '../actions/types'\r\nimport { HEATER_KIT } from '../utils/consts/instrumentKits'\r\n\r\nconst initialState = {\r\n    isPowerOn: true,\r\n    currentSound: '',\r\n    currentVolume: 50,\r\n    displayContent: '',\r\n    currentInstrumentKit: HEATER_KIT\r\n}\r\n\r\nconst drumMachineReducer = createReducer(initialState, {\r\n    [types.CHANGE_SOUND]: (state, action) => {\r\n        state.currentSound = action.payload\r\n        state.displayContent = action.payload\r\n    },\r\n    [types.CHANGE_VOLUME]: (state, action) => {\r\n        state.currentVolume = action.payload\r\n        state.displayContent = 'Volume: ' + action.payload\r\n    },\r\n    [types.CHANGE_INSTRUMENT_KIT]: (state, action) => {\r\n        state.currentInstrumentKit = action.payload\r\n        state.displayContent = action.payload\r\n    },\r\n    [types.TURN_POWER_ON_OFF]: (state, action) => {\r\n        state.isPowerOn = action.payload\r\n        state.displayContent = ''\r\n    }\r\n}, [], (state) => Object.assign({}, state))\r\n\r\nexport default drumMachineReducer\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport drumMachineReducer from './reducers/drumMachineReducer'\r\n\r\nconst store = configureStore({ reducer: drumMachineReducer })\r\n\r\nexport default store\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport './style/index.scss'\nimport App from './components/App'\nimport store from './store'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}